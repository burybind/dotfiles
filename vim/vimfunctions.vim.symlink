" Highlight Repeating Lines
function! HighlightRepeats() range
  let lineCounts = {}
  let lineNum = a:firstline
  while lineNum <= a:lastline
    let lineText = getline(lineNum)
    if lineText != ""
      let lineCounts[lineText] = (has_key(lineCounts, lineText) ? lineCounts[lineText] : 0) + 1
    endif
    let lineNum = lineNum + 1
  endwhile
  exe 'syn clear Repeat'
  for lineText in keys(lineCounts)
    if lineCounts[lineText] >= 2
      exe 'syn match Repeat "^' . escape(lineText, '".\^$*[]') . '$"'
    endif
  endfor
endfunction

command! -range=% HighlightRepeats <line1>,<line2>call HighlightRepeats()

" Write all search matches to a file, open that file
function! Matches()
  redir! >/tmp/matches.tmp
  g//
  redir END
  new /tmp/matches.tmp
endfunction

command! Matches <line1>,<line2>call Matches()

" Map case typos
command! E e
command! W w
command! Q q
command! Qa qa

" rm newlines from string
function! Chomp(string)
    return substitute(a:string, '\n\+$', '', '')
endfunction

" Chomp system() call
function! ChompedSystem( ... )
    return substitute(call('system', a:000), '\n\+$', '', '')
endfunction

" Print UTC date
function! UTCDate()
  let @z = ChompedSystem('date -u \+"%Y-%m-%d"')
  normal! "zp
endfunction

" Print ISO-8601 UTC datetime
function! UTCTime()
  let @z = ChompedSystem('date -u \+"%Y-%m-%dT%H:%MZ"')
  normal! "zp
endfunction

function! LocalDate()
  let @z = ChompedSystem('date \+"%Y-%m-%d"')
  normal! "zp
endfunction

function! LocalTime()
  let @z = ChompedSystem('date \+"%Y-%m-%dT%H:%M%z"')
  normal! "zp
endfunction

command! Date call UTCDate()
command! Time call UTCTime()
command! UTCDate call UTCDate()
command! UTCTime call UTCTime()
command! UD call UTCDate()
command! UT call UTCTime()
command! LocalDate call LocalDate()
command! LocalTime call LocalTime()
command! LD call LocalDate()
command! LT call LocalTime()

" Splits
function! SplitTwoByTwo()
  sp
  vsp
  winc k
  vsp
endfunction

function! SplitThree()
  vsp
  sp
endfunction

"command! SplitTwoByTwo call SplitTwoByTwo()
command! SplitThree call SplitThree()
command! SplitFour call SplitTwoByTwo()

" Print filename header in markdown
function! MarkdownHeader()
  put! ='# ' . expand('%:t:r')
  normal o
  normal o
  put! ='## Resources'
  normal G
  redraw!
  startinsert
endfunction

command! MarkdownHeader call MarkdownHeader()

" toggle color columns
let g:color_column_toggle = 0
function! ColorColumnToggle()
  if g:color_column_toggle
    setlocal colorcolumn=
    let g:color_column_toggle = 0
  else
    setlocal colorcolumn=1,5,9,13,17,21
    let g:color_column_toggle = 1
  endif
endfunction

command! ColorColumnToggle call ColorColumnToggle()

" copy relative path of current file to clipboard
command! RelPathToClipboard execute ':let @*=@% | echo @*'

" copy absolute path of current file to clipboard
command! AbsPathToClipboard execute ':let @*=expand("%:p") | echo expand("%:p")'

" copy relative  dir of current file to clipboard
command! RelDirToClipboard execute ':let @*=expand("%:h") | echo expand("%:h")'

" copy absolute dir of current file to clipboard
command! AbsDirToClipboard execute ':let @*=expand("%:p:h") | echo expand("%:p:h")'

" open directory of current file in system file browser
" uses vim-dispatch.
function! OpenDirInFileBrowser()
  let l:dir = expand("%:p:h")
  execute "Dispatch open " . l:dir
endfunction
command! OpenDirInFileBrowser call OpenDirInFileBrowser()

function! NewBuffer(str)
  execute "e " . a:str
endfunc
call toop#mapFunction('NewBuffer', 's')

" start profiling. good for tracing performance issues, debugging, etc.
function! StartProfile()
  profile start profile.log
  profile func *
  profile file *
endfunction
command! StartProfile call StartProfile()

" stop profiling and quit
function! StopProfile()
  profile pause
  noautocmd qall!
endfunction
command! StopProfile call StopProfile()

" remove file from disk and delete buffer
function! RM()
  execute "! rm %"
  execute "BD!"
endfunction
command! RM call RM()

" Duplicate creates a copy of a file in the same directory as the original.
"   * `dstFilename` should not contain slashes or dots.
function! Duplicate(dstFilename)
  let l:src=expand("%:p")
  let l:dst=expand("%:p:h")."/".a:dstFilename
  let l:cmd="sav! ".l:dst
  silent execute l:cmd
  redraw!
endfunction
" :Duplicate foo.txt
command! -nargs=1 Duplicate call Duplicate(<q-args>)

command! Executable silent execute '! chmod +x %' | execute ':redraw!'
command! IndentInfo execute 'set ts? sts? sw? ex? autoindent? smartindent?'
command! CopyBufferToClipboard execute '0,$y*'
command! PrettifyJSON execute '%!jq .'
